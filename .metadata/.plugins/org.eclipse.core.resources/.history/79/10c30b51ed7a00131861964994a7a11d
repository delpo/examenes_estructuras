package binaryTree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;
import java.lang.Math;


public class EDBinaryTree<T> implements BinaryTree<T> {
	
	protected static class BinaryNode<U> {
		protected U data;
		protected BinaryNode<U> left;
		protected BinaryNode<U> right;

	
		//constructors
		public BinaryNode (U data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
		
		public String toString() {
			return this.data.toString();
		}	
	}
	
	BinaryNode<T> root;  //reference to the node root of the tree
	
	//constructor empty binary tree
	public EDBinaryTree(){
		root = null;
	}
	
	//constructor: creates a new tree with a node with data in the root and left and right empty
	public EDBinaryTree(T data) {
		BinaryNode<T> n = new  BinaryNode<T>(data);
		this.root = n;
	}
	
	//constructor: given a node, constructs a binary tree whose root is that node
	private EDBinaryTree(BinaryNode<T> n){
		this.root = n;
	}
	
	//constructor: given data, and two binary trees constructs a new binary tree
	public EDBinaryTree(T data, EDBinaryTree<T> leftS, EDBinaryTree<T> rightS) {
		root = new BinaryNode<T>(data);
		if (leftS != null) {
			root.left = leftS.root;
		}
		else root.left = null;
		if (rightS != null) {
			root.right = rightS.root;
		}
		else root.right = null;
	}
	
	public boolean isEmpty() {
		return (this.root == null);
	}
	
	public boolean isLeaf() {
		if (root != null) {
			if (root.left == null && root.right == null)
				return true;
			else 
				return false;
		}
		else return false;
	}
	
	public T getData () {
		if (root != null) 
			return root.data;
		else
			return null;
	}
	
	public EDBinaryTree<T> getLeftSubTree(){
		if (root != null) {
			if (root.left != null) {
				EDBinaryTree<T> leftTree = new EDBinaryTree<T>(root.left);
				return leftTree;
			}
			else 
				return new EDBinaryTree<T>();  //empty tree
		}	
		else
				return null;
	}
	
	public EDBinaryTree<T> getRightSubTree(){
		if (root != null) {
			if (root.right != null) {
				EDBinaryTree<T> rightTree = new EDBinaryTree<T>(root.right);
				return rightTree;
			}
			else 
				return new EDBinaryTree<T>();  //empty tree
		}	
		else
				return null;
	}
	
	
	public void inOrder(List<T> listData) {
		if (!isEmpty()){
			inOrder(root,listData);
		}
	}

	private void inOrder(BinaryNode<T> r, List<T> listData) {
		if (r.left!=null) {
			inOrder(r.left,listData);
		}
		listData.add(r.data);
		if (r.right!=null) {
			inOrder(r.right,listData);
		}
	}
	
	public void preOrder(List<T> listData) {
		if (!isEmpty()){
			preOrder (root, listData);
		}
	}
	private void preOrder(BinaryNode<T> r, List<T> listData) {
		listData.add(r.data);
		if (r.left!=null)
			preOrder(r.left, listData);
		if (r.right!=null)
			preOrder(r.right, listData);
	}
	
	public void trasverse(List<T> listData) {
		Queue<BinaryNode<T>> queue = new LinkedList<BinaryNode<T>>();
		
		if (!isEmpty()) {
			queue.add(root);
			while (!queue.isEmpty()) {
				BinaryNode<T> actual = queue.poll(); //retrieves and removes
				listData.add(actual.data);
				if (actual.left!=null) 
					queue.add(actual.left);
				if (actual.right!=null)
					queue.add(actual.right);
			}
		}
	}
	
	public int size () {
		int acum=-1;
		if (this != null) {
			acum=0;
			if (!isEmpty()) 
				acum = size(root);
		}
		return acum;
	}
	
	public int height () {
		int h, hl,hr;
		if (isEmpty()) {
			h = 0;
		}
		else {		
			hl = getLeftSubTree().height();
		    hr = getRightSubTree().height();
			if (hl > hr) h = hl+1;
			else h = hr+1;
		}
		return h;
	}
	
	private int size (BinaryNode<T> r) {
		int acum = 1;
		if (r.left != null)
			acum += size(r.left);
		if (r.right != null)
			acum += size(r.right);
		return acum;
	}
	
	/**Displays a binary tree**/
	public void displayTree()
    {
    Stack<BinaryNode<T>> globalStack = new Stack<BinaryNode<T>>();
    globalStack.push(root);
    int nBlanks = 32;
    boolean isRowEmpty = false;
    System.out.println(
    "......................................................");
    while(isRowEmpty==false)
       {
       Stack<BinaryNode<T>> localStack = new Stack<BinaryNode<T>>();
       isRowEmpty = true;

       for(int j=0; j<nBlanks; j++)
          System.out.print(' ');

       while(globalStack.isEmpty()==false)
          {
          BinaryNode<T> temp = (BinaryNode<T>)globalStack.pop();
          if(temp != null)
             {
             System.out.print(temp.data);
             localStack.push(temp.left);
             localStack.push(temp.right);

             if(temp.left != null || temp.right != null)
                isRowEmpty = false;
             }
          else
             {
             System.out.print("--");
             localStack.push(null);
             localStack.push(null);
             }
          for(int j=0; j<nBlanks*2-2; j++)
             System.out.print(' ');
          }  // end while globalStack not empty
       System.out.println();
       nBlanks /= 2;
       while(localStack.isEmpty()==false)
          globalStack.push( localStack.pop() );
       }  // end while isRowEmpty is false
    System.out.println(
    "......................................................");
    }  // end displayTree()
	
	
	
	
}
